@page "/financials/chart-of-accounts"
@using System.Text.Json
@using System.Text.Json.Serialization
@using LibraryGDB.Models.Financial
@using Microsoft.JSInterop
@using Microsoft.Net.Http.Headers
@inject IHttpClientFactory ClientFactory
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<PageTitle>Chart of Accounts</PageTitle>

<h3>Chart Of Accounts</h3>

@if (getError || accounts is null)
{
   <div class="alert alert-danger">Unable to get data. Please try again later.</div>
}
else if (isLoading)
{
    <p>Loading accounts...</p>
}
else
{
    @*     <ul>
        @foreach (var item in accounts)
        {
            <li>@item.AccountName</li>
        }
    </ul> *@
    <style>
        .hiddenRow {
            padding: 4px !important;
        }
    </style>
    <div>
 <button class="btn btn-success mb-3" @onclick="OpenAddModal">Add Account</button>

        <table class="table table-condensed table-striped">
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Name</th>
                    <th>Balance</th>
                    <th>Debit</th>
                    <th>Credit</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
    @for (int accountIdx = 0; accountIdx < accounts.Count(); ++accountIdx)
                {
                    var account = accounts.ToList()[accountIdx];
                    var accountTargetId = $"asset-{accountIdx}";

                    <tr data-bs-toggle="collapse" data-bs-target="#@accountTargetId" aria-expanded="false" aria-controls="@accountTargetId">
                        <td>@account.AccountCode</td>
                        <td>@account.AccountName</td>
                        <td>@account.TotalBalance</td>
                        <td>@account.TotalDebitBalance</td>
                        <td>@account.TotalCreditBalance</td>
<td>
    <button class="btn btn-primary" @onclick="() => OpenEditModal(account)">Edit</button>
    <button class="btn btn-danger" @onclick="() => OpenDeleteModal(account)">Delete</button>
</td>
  </tr>

                    <tr>
                        <td colspan="12">
                            <div class="collapse" id="@accountTargetId" aria-expanded="false" aria-controls="@accountTargetId">

                                <table class="table table-striped">
                                    @for (int childAccountIdx = 0; childAccountIdx < account.ChildAccounts!.Count; ++childAccountIdx)
                                    {
                                        var childAccount = account.ChildAccounts.ToList()[childAccountIdx];
                                        var childAccountTargetId = $"asset-{accountIdx}-{childAccountIdx}";

                                        <tr data-bs-toggle="collapse" data-bs-target="#@childAccountTargetId" aria-expanded="false" aria-controls="@childAccountTargetId">
                                            <td>@childAccount.AccountCode</td>
                                            <td>@childAccount.AccountName</td>
                                            <td>@childAccount.TotalBalance</td>
                                            <td>@childAccount.TotalDebitBalance</td>
                                            <td>@childAccount.TotalCreditBalance</td>
                                        </tr>

                                        <tr>
                                            <td colspan="12">
                                                <div class="collapse" id="@childAccountTargetId" aria-expanded="false" aria-controls="@childAccountTargetId">

                                                    <table class="table table-striped">
                                                        @for (int grandChildAccountIdx = 0; grandChildAccountIdx < childAccount.ChildAccounts!.Count; ++grandChildAccountIdx)
                                                        {
                                                            var grandChildAccount = childAccount.ChildAccounts.ToList()[grandChildAccountIdx];
                                                            var grandChildAccountTargetId = $"asset-{accountIdx}-{childAccountIdx}-{grandChildAccountIdx}";

                                                            <tr data-bs-toggle="collapse" data-bs-target="#@grandChildAccountTargetId" aria-expanded="false" aria-controls="@grandChildAccountTargetId">
                                                                <td>@grandChildAccount.AccountCode</td>
                                                                <td>@grandChildAccount.AccountName</td>
                                                                <td>@grandChildAccount.TotalBalance</td>
                                                                <td>@grandChildAccount.TotalDebitBalance</td>
                                                                <td>@grandChildAccount.TotalCreditBalance</td>
                                                            </tr>

                                                            <tr>
                                                                <td colspan="12">
                                                                    <div class="collapse" id="@grandChildAccountTargetId" aria-expanded="false" aria-controls="@grandChildAccountTargetId">

                                                                        <table class="table table-striped">
                                                                            @foreach (var greatGrandChildAccount in grandChildAccount.ChildAccounts!)
                                                                            {
                                                                                <tr>
                                                                                    <td>@greatGrandChildAccount.AccountCode</td>
                                                                                    <td>@greatGrandChildAccount.AccountName</td>
                                                                                    <td>@greatGrandChildAccount.TotalBalance</td>
                                                                                    <td>@greatGrandChildAccount.TotalDebitBalance</td>
                                                                                    <td>@greatGrandChildAccount.TotalCreditBalance</td>
                                                                                </tr>
                                                                            }
                                                                        </table>

                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </table>

                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </table>

                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}
@if (isAddModalVisible || isEditModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEditModalVisible ? "Edit Account" : "Add Account"))</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="accountCode" class="form-label">Account Code</label>
                        <input type="text" id="accountCode" class="form-control" 
                               value="@selectedAccount?.AccountCode" 
                               @oninput="e => selectedAccount!.AccountCode = e.Value?.ToString() ?? string.Empty" 
                               disabled="@isEditModalVisible" />
                    </div>
                    <div class="mb-3">
                        <label for="accountName" class="form-label">Account Name</label>
                        <input type="text" id="accountName" class="form-control" 
                               value="@selectedAccount?.AccountName" 
                               @oninput="e => selectedAccount!.AccountName = e.Value?.ToString() ?? string.Empty" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveAccount">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isDeleteModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Account</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>
                        Are you sure you want to delete the account 
                        <strong>@selectedAccount?.AccountName</strong> 
                        with code <strong>@selectedAccount?.AccountCode</strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDeleteAccount">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<AccountViewModel> accounts = new();
    private AccountViewModel? selectedAccount = null;
    private bool isAddModalVisible = false;
    private bool isEditModalVisible = false;
    private bool isDeleteModalVisible = false;
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private bool getError = false;

    // Fetch accounts from API on initialization
    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsFromApi();
        isLoading = false;
    }

    // Load accounts from API
    private async Task LoadAccountsFromApi()
    {
        try
        {
            string apiUrl = Environment.GetEnvironmentVariable("APIURL") ?? "http://localhost:8001/api/";
            var client = ClientFactory.CreateClient();

            var response = await client.GetAsync($"{apiUrl}financials/accounts");

            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();
                accounts = JsonSerializer.Deserialize<List<AccountViewModel>>(jsonString, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                }) ?? new List<AccountViewModel>();
            }
            else
            {
                getError = true;
            }
        }
        catch
        {
            getError = true;
        }
    }


      // Open Add Modal
    private void OpenAddModal()
    {
        selectedAccount = new AccountViewModel();
        errorMessage = string.Empty;
        isAddModalVisible = true;
    }

    // Open Edit Modal
    private void OpenEditModal(AccountViewModel account)
    {
        selectedAccount = new AccountViewModel
        {
            AccountCode = account.AccountCode,
            AccountName = account.AccountName,
            TotalBalance = account.TotalBalance,
            TotalDebitBalance = account.TotalDebitBalance,
            TotalCreditBalance = account.TotalCreditBalance,
            ChildAccounts = account.ChildAccounts
        };
        errorMessage = string.Empty;
        isEditModalVisible = true;
    }

    // Close Add or Edit Modal
    private void CloseModal()
    {
        isAddModalVisible = false;
        isEditModalVisible = false;
        selectedAccount = null;
    }

    // Open Delete Modal
    private void OpenDeleteModal(AccountViewModel account)
    {
        selectedAccount = account;
        isDeleteModalVisible = true;
    }

    // Close Delete Modal
    private void CloseDeleteModal()
    {
        isDeleteModalVisible = false;
        selectedAccount = null;
    }

    // Add or Update Account
    private void SaveAccount()
    {
        if (selectedAccount == null)
        {
            errorMessage = "No account selected.";
            return;
        }

        if (string.IsNullOrWhiteSpace(selectedAccount.AccountCode) || string.IsNullOrWhiteSpace(selectedAccount.AccountName))
        {
            errorMessage = "Both Account Code and Account Name are required.";
            return;
        }

        if (isEditModalVisible)
        {
            // Edit existing account locally
            var account = accounts.FirstOrDefault(a => a.AccountCode == selectedAccount.AccountCode);
            if (account != null)
            {
                account.AccountName = selectedAccount.AccountName;
                account.TotalBalance = selectedAccount.TotalBalance;
                account.TotalDebitBalance = selectedAccount.TotalDebitBalance;
                account.TotalCreditBalance = selectedAccount.TotalCreditBalance;
            }
            else
            {
                errorMessage = "Account not found.";
            }
        }
        else
        {
            // Add new account locally
            if (accounts.Any(a => a.AccountCode == selectedAccount.AccountCode))
            {
                errorMessage = "An account with this Account Code already exists.";
                return;
            }

            accounts.Add(new AccountViewModel
            {
                AccountCode = selectedAccount.AccountCode,
                AccountName = selectedAccount.AccountName,
                TotalBalance = selectedAccount.TotalBalance,
                TotalDebitBalance = selectedAccount.TotalDebitBalance,
                TotalCreditBalance = selectedAccount.TotalCreditBalance,
                ChildAccounts = new List<AccountViewModel>()
            });
        }

        CloseModal();
    }

    // Delete Account
    private void ConfirmDeleteAccount()
    {
        if (selectedAccount == null)
        {
            errorMessage = "No account selected.";
            return;
        }

        accounts.Remove(selectedAccount);
        CloseDeleteModal();
    }

    // ViewModel for Accounts
    public class AccountViewModel
    {
        public string AccountCode { get; set; } = string.Empty;
        public string AccountName { get; set; } = string.Empty;
        public decimal TotalBalance { get; set; }
        public decimal TotalDebitBalance { get; set; }
        public decimal TotalCreditBalance { get; set; }
        public List<AccountViewModel> ChildAccounts { get; set; } = new();
    }
}
