@model string

@{
    ViewBag.Title = "Chart of Accounts";
}
<div>
</div>
<div>
    <div id="accounts" class="ag-blue" style="height:600px;"></div>
</div>
<script>
    var columnDefs = [
        {
            headerName: "Name",
            field: "indentedName", // Use a computed field for indented name
        },
        { headerName: "Group", cellRenderer: "agGroupCellRenderer", field: "accountClassId" },
        { headerName: "Code", field: "accountCode", width: 100 },
        { headerName: "Name", field: "accountName", width: 350 },
        @* { headerName: "Description", field: "description", width: 250 },
        {
            headerName: "Cash", width: 100, cellRenderer: function (val) {
                if (val.data.isCash)
                    return '<input type="checkbox" checked disabled />';
                return '<input type="checkbox" disabled />';
            }
        }, *@
        { headerName: "Balance", field: "totalBalance", width: 100 },
        { headerName: "Debit", field: "totalDebitBalance", width: 100 },
        { headerName: "Credit", field: "totalCreditBalance", width: 100 }
    ];

    var gridOptions = {
        autoGroupColumnDef: {
            headerName: 'Name', // Display indented name in auto group column
            field: 'indentedName'
        },
        columnDefs: columnDefs,
        rowData: null,
        getNodeChildDetails: function (data) {
            if (data.childAccounts.length > 0) {
                return {
                    group: true,
                    children: data.childAccounts,
                    key: data.accountCode
                };
            } else {
                return null;
            }
        },
        icons: {
            groupExpanded: '<i class="fa fa-minus-square-o"/>',
            groupContracted: '<i class="fa fa-plus-square-o"/>'
        },
        // PROPERTIES
        rowSelection: 'single',
        enableFilter: true,
        enableColResize: true,
    };

    function flattenChildAccounts(value, depth = 0) {
        const result = [];
        value.forEach(item => {
            result.push(item);
            if (item.childAccounts) {
                // Recursively flatten childAccounts with increased depth
                result.push(...flattenChildAccounts(item.childAccounts, depth + 1));
            }
        });
        return result;
    }

    function autoSizeAll() {
        var allColumnIds = [];
        columnDefs.forEach(function (columnDef) {
            allColumnIds.push(columnDef.field);
        });
        gridOptions.columnApi.autoSizeColumns(allColumnIds);
    }

    // wait for the document to be loaded, otherwise
    // ag-Grid will not find the div in the document.
    document.addEventListener("DOMContentLoaded", function () {
        var eGridDiv = document.querySelector('#accounts');
        new agGrid.Grid(eGridDiv, gridOptions)
        const value = flattenChildAccounts(@Html.Raw(Model));
        console.log(value);
        gridOptions.api.setRowData(value);
        autoSizeAll();
    });
</script>