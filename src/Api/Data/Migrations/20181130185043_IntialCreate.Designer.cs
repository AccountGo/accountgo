// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Data.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20181130185043_IntialCreate")]
    partial class IntialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("No");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Core.Domain.Auditing.AuditableAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeName");

                    b.Property<int>("AuditableEntityId");

                    b.Property<bool>("EnableAudit");

                    b.HasKey("Id");

                    b.HasIndex("AuditableEntityId");

                    b.ToTable("AuditableAttribute","dbo");
                });

            modelBuilder.Entity("Core.Domain.Auditing.AuditableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EnableAudit");

                    b.Property<string>("EntityName");

                    b.HasKey("Id");

                    b.ToTable("AuditableEntity","dbo");
                });

            modelBuilder.Entity("Core.Domain.Auditing.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuditEventDateUTC");

                    b.Property<int>("AuditEventType");

                    b.Property<string>("FieldName");

                    b.Property<string>("NewValue");

                    b.Property<string>("OriginalValue");

                    b.Property<string>("RecordId");

                    b.Property<string>("TableName");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("AuditLog","dbo");
                });

            modelBuilder.Entity("Core.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyCode");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Core.Domain.CompanySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanySetting");
                });

            modelBuilder.Entity("Core.Domain.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactType");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<int>("PartyId");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Core.Domain.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId");

                    b.Property<int>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContact");
                });

            modelBuilder.Entity("Core.Domain.Financials.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountClassId");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("DrOrCrSide");

                    b.Property<bool>("IsCash");

                    b.Property<bool>("IsContraAccount");

                    b.Property<int?>("ParentAccountId");

                    b.Property<byte[]>("RowVersion")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.HasIndex("AccountClassId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Core.Domain.Financials.AccountClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("NormalBalance");

                    b.HasKey("Id");

                    b.ToTable("AccountClass");
                });

            modelBuilder.Entity("Core.Domain.Financials.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("Address");

                    b.Property<string>("BankName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Core.Domain.Financials.FinancialYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("FiscalYearCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("FiscalYearName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("FinancialYear");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("DocumentType");

                    b.HasKey("Id");

                    b.ToTable("GeneralLedgerHeader");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Amount");

                    b.Property<int>("DrCr");

                    b.Property<int>("GeneralLedgerHeaderId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.ToTable("GeneralLedgerLine");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("GoodsReceiptNoteClearingAccountId");

                    b.Property<int?>("IncomeSummaryAccountId");

                    b.Property<int?>("PayableAccountId");

                    b.Property<int?>("PermanentAccountId");

                    b.Property<int?>("PurchaseDiscountAccountId");

                    b.Property<int?>("SalesDiscountAccountId");

                    b.Property<int?>("ShippingChargeAccountId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GoodsReceiptNoteClearingAccountId");

                    b.HasIndex("IncomeSummaryAccountId");

                    b.HasIndex("PayableAccountId");

                    b.HasIndex("PermanentAccountId");

                    b.HasIndex("PurchaseDiscountAccountId");

                    b.HasIndex("SalesDiscountAccountId");

                    b.HasIndex("ShippingChargeAccountId");

                    b.ToTable("GeneralLedgerSetting");
                });

            modelBuilder.Entity("Core.Domain.Financials.JournalEntryHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GeneralLedgerHeaderId");

                    b.Property<string>("Memo");

                    b.Property<int?>("PartyId");

                    b.Property<bool?>("Posted");

                    b.Property<string>("ReferenceNo");

                    b.Property<int?>("VoucherType");

                    b.HasKey("Id");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("PartyId");

                    b.ToTable("JournalEntryHeader");
                });

            modelBuilder.Entity("Core.Domain.Financials.JournalEntryLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Amount");

                    b.Property<int>("DrCr");

                    b.Property<int>("JournalEntryHeaderId");

                    b.Property<string>("Memo");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JournalEntryHeaderId");

                    b.ToTable("JournalEntryLine");
                });

            modelBuilder.Entity("Core.Domain.Financials.MainContraAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MainAccountId");

                    b.Property<int>("RelatedContraAccountId");

                    b.HasKey("Id");

                    b.HasIndex("MainAccountId");

                    b.HasIndex("RelatedContraAccountId");

                    b.ToTable("MainContraAccount");
                });

            modelBuilder.Entity("Core.Domain.Items.InventoryControlJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("DocumentType");

                    b.Property<decimal?>("INQty");

                    b.Property<bool>("IsReverse");

                    b.Property<int>("ItemId");

                    b.Property<int>("MeasurementId");

                    b.Property<decimal?>("OUTQty");

                    b.Property<decimal?>("TotalAmount");

                    b.Property<decimal?>("TotalCost");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.ToTable("InventoryControlJournal");
                });

            modelBuilder.Entity("Core.Domain.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<decimal?>("Cost");

                    b.Property<int?>("CostOfGoodsSoldAccountId");

                    b.Property<string>("Description");

                    b.Property<int?>("InventoryAccountId");

                    b.Property<int?>("InventoryAdjustmentAccountId");

                    b.Property<int?>("ItemCategoryId");

                    b.Property<int?>("ItemTaxGroupId");

                    b.Property<string>("No");

                    b.Property<int?>("PreferredVendorId");

                    b.Property<decimal?>("Price");

                    b.Property<string>("PurchaseDescription");

                    b.Property<int?>("PurchaseMeasurementId");

                    b.Property<int?>("SalesAccountId");

                    b.Property<string>("SellDescription");

                    b.Property<int?>("SellMeasurementId");

                    b.Property<int?>("SmallestMeasurementId");

                    b.HasKey("Id");

                    b.HasIndex("CostOfGoodsSoldAccountId");

                    b.HasIndex("InventoryAccountId");

                    b.HasIndex("InventoryAdjustmentAccountId");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("ItemTaxGroupId");

                    b.HasIndex("PreferredVendorId");

                    b.HasIndex("PurchaseMeasurementId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("SellMeasurementId");

                    b.HasIndex("SmallestMeasurementId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Core.Domain.Items.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdjustmentAccountId");

                    b.Property<int?>("AssemblyAccountId");

                    b.Property<int?>("CostOfGoodsSoldAccountId");

                    b.Property<int?>("InventoryAccountId");

                    b.Property<int>("ItemType");

                    b.Property<int?>("MeasurementId");

                    b.Property<string>("Name");

                    b.Property<int?>("SalesAccountId");

                    b.HasKey("Id");

                    b.HasIndex("AdjustmentAccountId");

                    b.HasIndex("AssemblyAccountId");

                    b.HasIndex("CostOfGoodsSoldAccountId");

                    b.HasIndex("InventoryAccountId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesAccountId");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Core.Domain.Items.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("Core.Domain.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallSite");

                    b.Property<string>("Exception");

                    b.Property<string>("Level");

                    b.Property<string>("Logger");

                    b.Property<string>("Message");

                    b.Property<string>("StackTrace");

                    b.Property<string>("Thread");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Core.Domain.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("PartyType");

                    b.Property<string>("Phone");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Party");
                });

            modelBuilder.Entity("Core.Domain.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("DueAfterDays");

                    b.Property<bool>("IsActive");

                    b.Property<int>("PaymentType");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseInvoiceHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int?>("GeneralLedgerHeaderId");

                    b.Property<string>("No");

                    b.Property<int?>("PaymentTermId");

                    b.Property<string>("ReferenceNo");

                    b.Property<int?>("Status");

                    b.Property<int?>("VendorId");

                    b.Property<string>("VendorInvoiceNo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseInvoiceHeader");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseInvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal?>("Cost");

                    b.Property<decimal?>("Discount");

                    b.Property<int?>("InventoryControlJournalId");

                    b.Property<int>("ItemId");

                    b.Property<int>("MeasurementId");

                    b.Property<int>("PurchaseInvoiceHeaderId");

                    b.Property<int?>("PurchaseOrderLineId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal?>("ReceivedQuantity");

                    b.HasKey("Id");

                    b.HasIndex("InventoryControlJournalId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("PurchaseOrderLineId");

                    b.ToTable("PurchaseInvoiceLine");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("No");

                    b.Property<int?>("PaymentTermId");

                    b.Property<int?>("PurchaseInvoiceHeaderId");

                    b.Property<string>("ReferenceNo");

                    b.Property<int?>("Status");

                    b.Property<int?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrderHeader");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Cost");

                    b.Property<decimal>("Discount");

                    b.Property<int>("ItemId");

                    b.Property<int>("MeasurementId");

                    b.Property<int>("PurchaseOrderHeaderId");

                    b.Property<decimal>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("PurchaseOrderHeaderId");

                    b.ToTable("PurchaseOrderLine");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseReceiptHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GeneralLedgerHeaderId");

                    b.Property<string>("No");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseReceiptHeader");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseReceiptLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Cost");

                    b.Property<decimal>("Discount");

                    b.Property<int?>("InventoryControlJournalId");

                    b.Property<int>("ItemId");

                    b.Property<int>("MeasurementId");

                    b.Property<int?>("PurchaseInvoiceLineId");

                    b.Property<int>("PurchaseReceiptHeaderId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("ReceivedQuantity");

                    b.HasKey("Id");

                    b.HasIndex("InventoryControlJournalId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("PurchaseInvoiceLineId");

                    b.HasIndex("PurchaseReceiptHeaderId");

                    b.ToTable("PurchaseReceiptLine");
                });

            modelBuilder.Entity("Core.Domain.Purchases.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountsPayableAccountId");

                    b.Property<string>("No");

                    b.Property<int?>("PartyId");

                    b.Property<int?>("PaymentTermId");

                    b.Property<int?>("PrimaryContactId");

                    b.Property<int?>("PurchaseAccountId");

                    b.Property<int?>("PurchaseDiscountAccountId");

                    b.Property<int?>("TaxGroupId");

                    b.HasKey("Id");

                    b.HasIndex("AccountsPayableAccountId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("PrimaryContactId");

                    b.HasIndex("PurchaseAccountId");

                    b.HasIndex("PurchaseDiscountAccountId");

                    b.HasIndex("TaxGroupId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Core.Domain.Purchases.VendorPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GeneralLedgerHeaderId");

                    b.Property<string>("No");

                    b.Property<int?>("PurchaseInvoiceHeaderId");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorPayment");
                });

            modelBuilder.Entity("Core.Domain.Sales.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountsReceivableAccountId");

                    b.Property<int?>("CustomerAdvancesAccountId");

                    b.Property<string>("No");

                    b.Property<int?>("PartyId");

                    b.Property<int?>("PaymentTermId");

                    b.Property<int?>("PrimaryContactId");

                    b.Property<int?>("PromptPaymentDiscountAccountId");

                    b.Property<int?>("SalesAccountId");

                    b.Property<int?>("SalesDiscountAccountId");

                    b.Property<int?>("TaxGroupId");

                    b.HasKey("Id");

                    b.HasIndex("AccountsReceivableAccountId");

                    b.HasIndex("CustomerAdvancesAccountId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("PrimaryContactId");

                    b.HasIndex("PromptPaymentDiscountAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("SalesDiscountAccountId");

                    b.HasIndex("TaxGroupId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Core.Domain.Sales.CustomerAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("SalesInvoiceHeaderId");

                    b.Property<int>("SalesReceiptHeaderId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("SalesReceiptHeaderId");

                    b.ToTable("CustomerAllocation");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesDeliveryHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GeneralLedgerHeaderId");

                    b.Property<string>("No");

                    b.Property<int?>("PaymentTermId");

                    b.Property<int?>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("PaymentTermId");

                    b.ToTable("SalesDeliveryHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesDeliveryLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Discount");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("MeasurementId");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("SalesDeliveryHeaderId");

                    b.Property<int?>("SalesInvoiceLineId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesDeliveryHeaderId");

                    b.HasIndex("SalesInvoiceLineId");

                    b.ToTable("SalesDeliveryLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GeneralLedgerHeaderId");

                    b.Property<string>("No");

                    b.Property<int?>("PaymentTermId");

                    b.Property<string>("ReferenceNo");

                    b.Property<decimal>("ShippingHandlingCharge");

                    b.Property<int?>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.ToTable("SalesInvoiceHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Discount");

                    b.Property<int?>("InventoryControlJournalId");

                    b.Property<int>("ItemId");

                    b.Property<int>("MeasurementId");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("SalesInvoiceHeaderId");

                    b.Property<int?>("SalesOrderLineId");

                    b.HasKey("Id");

                    b.HasIndex("InventoryControlJournalId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("SalesOrderLineId");

                    b.ToTable("SalesInvoiceLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("No");

                    b.Property<int?>("PaymentTermId");

                    b.Property<string>("ReferenceNo");

                    b.Property<int?>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTermId");

                    b.ToTable("SalesOrderHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Discount");

                    b.Property<int>("ItemId");

                    b.Property<int>("MeasurementId");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("SalesOrderHeaderId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesOrderHeaderId");

                    b.ToTable("SalesOrderLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesQuoteHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("No");

                    b.Property<int?>("PaymentTermId");

                    b.Property<string>("ReferenceNo");

                    b.Property<int?>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("SalesQuoteHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesQuoteLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("Discount");

                    b.Property<int>("ItemId");

                    b.Property<int>("MeasurementId");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("SalesQuoteHeaderId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesQuoteHeaderId");

                    b.ToTable("SalesQuoteLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesReceiptHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountToDebitId");

                    b.Property<decimal>("Amount");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GeneralLedgerHeaderId");

                    b.Property<string>("No");

                    b.Property<int?>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AccountToDebitId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.ToTable("SalesReceiptHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesReceiptLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountToCreditId");

                    b.Property<decimal?>("Amount");

                    b.Property<decimal>("AmountPaid");

                    b.Property<decimal?>("Discount");

                    b.Property<int?>("ItemId");

                    b.Property<int?>("MeasurementId");

                    b.Property<decimal?>("Quantity");

                    b.Property<int?>("SalesInvoiceLineId");

                    b.Property<int>("SalesReceiptHeaderId");

                    b.HasKey("Id");

                    b.HasIndex("AccountToCreditId");

                    b.HasIndex("SalesInvoiceLineId");

                    b.HasIndex("SalesReceiptHeaderId");

                    b.ToTable("SalesReceiptLine");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SecurityGroup","dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name");

                    b.Property<int>("SecurityGroupId");

                    b.HasKey("Id");

                    b.HasIndex("SecurityGroupId");

                    b.ToTable("SecurityPermission","dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name");

                    b.Property<bool>("SysAdmin");

                    b.Property<bool>("System");

                    b.HasKey("Id");

                    b.ToTable("SecurityRole","dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityRolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SecurityPermissionId");

                    b.Property<int>("SecurityRoleId");

                    b.HasKey("Id");

                    b.HasIndex("SecurityPermissionId");

                    b.HasIndex("SecurityRoleId");

                    b.ToTable("SecurityRolePermission","dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SecurityRoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SecurityRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityUserRole","dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User","dbo");
                });

            modelBuilder.Entity("Core.Domain.SequenceNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("NextNumber");

                    b.Property<string>("Prefix");

                    b.Property<int>("SequenceNumberType");

                    b.Property<bool>("UsePrefix");

                    b.HasKey("Id");

                    b.ToTable("SequenceNumber");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.ItemTaxGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsFullyExempt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ItemTaxGroup");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.ItemTaxGroupTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsExempt");

                    b.Property<int>("ItemTaxGroupId");

                    b.Property<int>("TaxId");

                    b.HasKey("Id");

                    b.HasIndex("ItemTaxGroupId");

                    b.HasIndex("TaxId");

                    b.ToTable("ItemTaxGroupTax");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("PurchasingAccountId");

                    b.Property<decimal>("Rate");

                    b.Property<int?>("SalesAccountId");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PurchasingAccountId");

                    b.HasIndex("SalesAccountId");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.TaxGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("TaxAppliedToShipping");

                    b.HasKey("Id");

                    b.ToTable("TaxGroup");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.TaxGroupTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TaxGroupId");

                    b.Property<int>("TaxId");

                    b.HasKey("Id");

                    b.HasIndex("TaxGroupId");

                    b.HasIndex("TaxId");

                    b.ToTable("TaxGroupTax");
                });

            modelBuilder.Entity("Core.Domain.VendorContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorContact");
                });

            modelBuilder.Entity("Core.Domain.Auditing.AuditableAttribute", b =>
                {
                    b.HasOne("Core.Domain.Auditing.AuditableEntity", "AuditableEntity")
                        .WithMany("AuditableAttributes")
                        .HasForeignKey("AuditableEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.CompanySetting", b =>
                {
                    b.HasOne("Core.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Contact", b =>
                {
                    b.HasOne("Core.Domain.Party", "Party")
                        .WithMany("Contacts")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.CustomerContact", b =>
                {
                    b.HasOne("Core.Domain.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("CustomerContact")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Financials.Account", b =>
                {
                    b.HasOne("Core.Domain.Financials.AccountClass", "AccountClass")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Financials.Account", "ParentAccount")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("ParentAccountId");
                });

            modelBuilder.Entity("Core.Domain.Financials.Bank", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerLine", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "Account")
                        .WithMany("GeneralLedgerLines")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany("GeneralLedgerLines")
                        .HasForeignKey("GeneralLedgerHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerSetting", b =>
                {
                    b.HasOne("Core.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Core.Domain.Financials.Account", "GoodsReceiptNoteClearingAccount")
                        .WithMany()
                        .HasForeignKey("GoodsReceiptNoteClearingAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "IncomeSummaryAccount")
                        .WithMany()
                        .HasForeignKey("IncomeSummaryAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "PayableAccount")
                        .WithMany()
                        .HasForeignKey("PayableAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "PermanentAccount")
                        .WithMany()
                        .HasForeignKey("PermanentAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "PurchaseDiscountAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseDiscountAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesDiscountAccount")
                        .WithMany()
                        .HasForeignKey("SalesDiscountAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "ShippingChargeAccount")
                        .WithMany()
                        .HasForeignKey("ShippingChargeAccountId");
                });

            modelBuilder.Entity("Core.Domain.Financials.JournalEntryHeader", b =>
                {
                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");
                });

            modelBuilder.Entity("Core.Domain.Financials.JournalEntryLine", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Financials.JournalEntryHeader", "JournalEntryHeader")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("JournalEntryHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Financials.MainContraAccount", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "MainAccount")
                        .WithMany("ContraAccounts")
                        .HasForeignKey("MainAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Financials.Account", "RelatedContraAccount")
                        .WithMany()
                        .HasForeignKey("RelatedContraAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Items.InventoryControlJournal", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("InventoryControlJournals")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Items.Item", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "CostOfGoodsSoldAccount")
                        .WithMany()
                        .HasForeignKey("CostOfGoodsSoldAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "InventoryAccount")
                        .WithMany()
                        .HasForeignKey("InventoryAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "InventoryAdjustmentAccount")
                        .WithMany()
                        .HasForeignKey("InventoryAdjustmentAccountId");

                    b.HasOne("Core.Domain.Items.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId");

                    b.HasOne("Core.Domain.TaxSystem.ItemTaxGroup", "ItemTaxGroup")
                        .WithMany()
                        .HasForeignKey("ItemTaxGroupId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "PreferredVendor")
                        .WithMany()
                        .HasForeignKey("PreferredVendorId");

                    b.HasOne("Core.Domain.Items.Measurement", "PurchaseMeasurement")
                        .WithMany()
                        .HasForeignKey("PurchaseMeasurementId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId");

                    b.HasOne("Core.Domain.Items.Measurement", "SellMeasurement")
                        .WithMany()
                        .HasForeignKey("SellMeasurementId");

                    b.HasOne("Core.Domain.Items.Measurement", "SmallestMeasurement")
                        .WithMany()
                        .HasForeignKey("SmallestMeasurementId");
                });

            modelBuilder.Entity("Core.Domain.Items.ItemCategory", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AdjustmentAccount")
                        .WithMany()
                        .HasForeignKey("AdjustmentAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "AssemblyAccount")
                        .WithMany()
                        .HasForeignKey("AssemblyAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "CostOfGoodsSoldAccount")
                        .WithMany()
                        .HasForeignKey("CostOfGoodsSoldAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "InventoryAccount")
                        .WithMany()
                        .HasForeignKey("InventoryAccountId");

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseInvoiceHeader", b =>
                {
                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseInvoiceLine", b =>
                {
                    b.HasOne("Core.Domain.Items.InventoryControlJournal", "InventoryControlJournal")
                        .WithMany()
                        .HasForeignKey("InventoryControlJournalId");

                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Purchases.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Purchases.PurchaseOrderLine", "PurchaseOrderLine")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("PurchaseOrderLineId");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderHeader", b =>
                {
                    b.HasOne("Core.Domain.Purchases.PurchaseInvoiceHeader")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PurchaseInvoiceHeaderId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderLine", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Purchases.PurchaseOrderHeader", "PurhcaseOrderHeader")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PurchaseOrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseReceiptHeader", b =>
                {
                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany("PurchaseOrderReceipts")
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseReceiptLine", b =>
                {
                    b.HasOne("Core.Domain.Items.InventoryControlJournal", "InventoryControlJournal")
                        .WithMany()
                        .HasForeignKey("InventoryControlJournalId");

                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("PurchaseReceiptLines")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Purchases.PurchaseInvoiceLine", "PurchaseInvoiceLine")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceLineId");

                    b.HasOne("Core.Domain.Purchases.PurchaseReceiptHeader", "PurchaseReceiptHeader")
                        .WithMany("PurchaseReceiptLines")
                        .HasForeignKey("PurchaseReceiptHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Purchases.Vendor", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AccountsPayableAccount")
                        .WithMany()
                        .HasForeignKey("AccountsPayableAccountId");

                    b.HasOne("Core.Domain.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("Core.Domain.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.HasOne("Core.Domain.Contact", "PrimaryContact")
                        .WithMany()
                        .HasForeignKey("PrimaryContactId");

                    b.HasOne("Core.Domain.Financials.Account", "PurchaseAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "PurchaseDiscountAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseDiscountAccountId");

                    b.HasOne("Core.Domain.TaxSystem.TaxGroup", "TaxGroup")
                        .WithMany()
                        .HasForeignKey("TaxGroupId");
                });

            modelBuilder.Entity("Core.Domain.Purchases.VendorPayment", b =>
                {
                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.Purchases.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany("VendorPayments")
                        .HasForeignKey("PurchaseInvoiceHeaderId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("VendorPayments")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Sales.Customer", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AccountsReceivableAccount")
                        .WithMany()
                        .HasForeignKey("AccountsReceivableAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "CustomerAdvancesAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAdvancesAccountId");

                    b.HasOne("Core.Domain.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("Core.Domain.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.HasOne("Core.Domain.Contact", "PrimaryContact")
                        .WithMany()
                        .HasForeignKey("PrimaryContactId");

                    b.HasOne("Core.Domain.Financials.Account", "PromptPaymentDiscountAccount")
                        .WithMany()
                        .HasForeignKey("PromptPaymentDiscountAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesDiscountAccount")
                        .WithMany()
                        .HasForeignKey("SalesDiscountAccountId");

                    b.HasOne("Core.Domain.TaxSystem.TaxGroup", "TaxGroup")
                        .WithMany()
                        .HasForeignKey("TaxGroupId");
                });

            modelBuilder.Entity("Core.Domain.Sales.CustomerAllocation", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("CustomerAllocations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Sales.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany("CustomerAllocations")
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Sales.SalesReceiptHeader", "SalesReceiptHeader")
                        .WithMany("CustomerAllocations")
                        .HasForeignKey("SalesReceiptHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesDeliveryHeader", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesDeliveryLine", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId");

                    b.HasOne("Core.Domain.Sales.SalesDeliveryHeader", "SalesDeliveryHeader")
                        .WithMany("SalesDeliveryLines")
                        .HasForeignKey("SalesDeliveryHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Sales.SalesInvoiceLine", "SalesInvoiceLine")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceLineId");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceHeader", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceLine", b =>
                {
                    b.HasOne("Core.Domain.Items.InventoryControlJournal", "InventoryControlJournal")
                        .WithMany()
                        .HasForeignKey("InventoryControlJournalId");

                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("SalesInvoiceLines")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Sales.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany("SalesInvoiceLines")
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Sales.SalesOrderLine", "SalesOrderLine")
                        .WithMany("SalesInvoiceLines")
                        .HasForeignKey("SalesOrderLineId");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderHeader", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Domain.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderLine", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Sales.SalesOrderHeader", "SalesOrderHeader")
                        .WithMany("SalesOrderLines")
                        .HasForeignKey("SalesOrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesQuoteHeader", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesQuoteLine", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Sales.SalesQuoteHeader", "SalesQuoteHeader")
                        .WithMany("SalesQuoteLines")
                        .HasForeignKey("SalesQuoteHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesReceiptHeader", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AccountToDebit")
                        .WithMany()
                        .HasForeignKey("AccountToDebitId");

                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesReceiptLine", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AccountToCredit")
                        .WithMany()
                        .HasForeignKey("AccountToCreditId");

                    b.HasOne("Core.Domain.Sales.SalesInvoiceLine", "SalesInvoiceLine")
                        .WithMany("SalesReceiptLines")
                        .HasForeignKey("SalesInvoiceLineId");

                    b.HasOne("Core.Domain.Sales.SalesReceiptHeader", "SalesReceiptHeader")
                        .WithMany("SalesReceiptLines")
                        .HasForeignKey("SalesReceiptHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityPermission", b =>
                {
                    b.HasOne("Core.Domain.Security.SecurityGroup", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityRolePermission", b =>
                {
                    b.HasOne("Core.Domain.Security.SecurityPermission", "SecurityPermission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("SecurityPermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Security.SecurityRole", "SecurityRole")
                        .WithMany("Permissions")
                        .HasForeignKey("SecurityRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityUserRole", b =>
                {
                    b.HasOne("Core.Domain.Security.SecurityRole", "SecurityRole")
                        .WithMany("Users")
                        .HasForeignKey("SecurityRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Security.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.ItemTaxGroupTax", b =>
                {
                    b.HasOne("Core.Domain.TaxSystem.ItemTaxGroup", "ItemTaxGroup")
                        .WithMany("ItemTaxGroupTax")
                        .HasForeignKey("ItemTaxGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.TaxSystem.Tax", "Tax")
                        .WithMany("ItemTaxGroupTaxes")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.Tax", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "PurchasingAccount")
                        .WithMany()
                        .HasForeignKey("PurchasingAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.TaxGroupTax", b =>
                {
                    b.HasOne("Core.Domain.TaxSystem.TaxGroup", "TaxGroup")
                        .WithMany("TaxGroupTax")
                        .HasForeignKey("TaxGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.TaxSystem.Tax", "Tax")
                        .WithMany("TaxGroupTaxes")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.VendorContact", b =>
                {
                    b.HasOne("Core.Domain.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("VendorContact")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
