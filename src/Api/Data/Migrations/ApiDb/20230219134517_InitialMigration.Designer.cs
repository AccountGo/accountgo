// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Data.Migrations.ApiDb
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20230219134517_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Core.Domain.Auditing.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditEventDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<int>("AuditEventType")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLog", "dbo");
                });

            modelBuilder.Entity("Core.Domain.Auditing.AuditableAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuditableEntityId")
                        .HasColumnType("int");

                    b.Property<bool>("EnableAudit")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuditableEntityId");

                    b.ToTable("AuditableAttribute", "dbo");
                });

            modelBuilder.Entity("Core.Domain.Auditing.AuditableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EnableAudit")
                        .HasColumnType("bit");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditableEntity", "dbo");
                });

            modelBuilder.Entity("Core.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Core.Domain.CompanySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanySetting");
                });

            modelBuilder.Entity("Core.Domain.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Core.Domain.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContact");
                });

            modelBuilder.Entity("Core.Domain.Financials.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountClassId")
                        .HasColumnType("int");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DrOrCrSide")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContraAccount")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(8)
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AccountClassId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Core.Domain.Financials.AccountClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalBalance")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountClass");
                });

            modelBuilder.Entity("Core.Domain.Financials.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Core.Domain.Financials.FinancialYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FiscalYearCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FiscalYearName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FinancialYear");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GeneralLedgerHeader");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DrCr")
                        .HasColumnType("int");

                    b.Property<int>("GeneralLedgerHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.ToTable("GeneralLedgerLine");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("GoodsReceiptNoteClearingAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeSummaryAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("PayableAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("PermanentAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseDiscountAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesDiscountAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingChargeAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GoodsReceiptNoteClearingAccountId");

                    b.HasIndex("IncomeSummaryAccountId");

                    b.HasIndex("PayableAccountId");

                    b.HasIndex("PermanentAccountId");

                    b.HasIndex("PurchaseDiscountAccountId");

                    b.HasIndex("SalesDiscountAccountId");

                    b.HasIndex("ShippingChargeAccountId");

                    b.ToTable("GeneralLedgerSetting");
                });

            modelBuilder.Entity("Core.Domain.Financials.JournalEntryHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeneralLedgerHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartyId")
                        .HasColumnType("int");

                    b.Property<bool?>("Posted")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VoucherType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("PartyId");

                    b.ToTable("JournalEntryHeader");
                });

            modelBuilder.Entity("Core.Domain.Financials.JournalEntryLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DrCr")
                        .HasColumnType("int");

                    b.Property<int>("JournalEntryHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JournalEntryHeaderId");

                    b.ToTable("JournalEntryLine");
                });

            modelBuilder.Entity("Core.Domain.Financials.MainContraAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainAccountId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedContraAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainAccountId")
                        .IsUnique();

                    b.HasIndex("RelatedContraAccountId");

                    b.ToTable("MainContraAccount");
                });

            modelBuilder.Entity("Core.Domain.Items.InventoryControlJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<decimal?>("INQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsReverse")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OUTQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.ToTable("InventoryControlJournal");
                });

            modelBuilder.Entity("Core.Domain.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostOfGoodsSoldAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InventoryAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryAdjustmentAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemTaxGroupId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreferredVendorId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PurchaseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseMeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<string>("SellDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellMeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("SmallestMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostOfGoodsSoldAccountId");

                    b.HasIndex("InventoryAccountId");

                    b.HasIndex("InventoryAdjustmentAccountId");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("ItemTaxGroupId");

                    b.HasIndex("PreferredVendorId");

                    b.HasIndex("PurchaseMeasurementId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("SellMeasurementId");

                    b.HasIndex("SmallestMeasurementId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Core.Domain.Items.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdjustmentAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AssemblyAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CostOfGoodsSoldAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryAccountId")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<int?>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdjustmentAccountId");

                    b.HasIndex("AssemblyAccountId");

                    b.HasIndex("CostOfGoodsSoldAccountId");

                    b.HasIndex("InventoryAccountId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesAccountId");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Core.Domain.Items.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("Core.Domain.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CallSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thread")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Core.Domain.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyType")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Party");
                });

            modelBuilder.Entity("Core.Domain.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DueAfterDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseInvoiceHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeneralLedgerHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("VendorInvoiceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseInvoiceHeader");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseInvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InventoryControlJournalId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderLineId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ReceivedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryControlJournalId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("PurchaseOrderLineId");

                    b.ToTable("PurchaseInvoiceLine");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrderHeader");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("PurchaseOrderHeaderId");

                    b.ToTable("PurchaseOrderLine");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseReceiptHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeneralLedgerHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseReceiptHeader");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseReceiptLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InventoryControlJournalId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseInvoiceLineId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseReceiptHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReceivedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryControlJournalId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("PurchaseInvoiceLineId");

                    b.HasIndex("PurchaseReceiptHeaderId");

                    b.ToTable("PurchaseReceiptLine");
                });

            modelBuilder.Entity("Core.Domain.Purchases.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountsPayableAccountId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryContactId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseDiscountAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountsPayableAccountId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("PrimaryContactId");

                    b.HasIndex("PurchaseAccountId");

                    b.HasIndex("PurchaseDiscountAccountId");

                    b.HasIndex("TaxGroupId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Core.Domain.Purchases.VendorPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeneralLedgerHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseInvoiceHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("PurchaseInvoiceHeaderId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorPayment");
                });

            modelBuilder.Entity("Core.Domain.Sales.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountsReceivableAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerAdvancesAccountId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartyId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryContactId")
                        .HasColumnType("int");

                    b.Property<int?>("PromptPaymentDiscountAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesDiscountAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountsReceivableAccountId");

                    b.HasIndex("CustomerAdvancesAccountId");

                    b.HasIndex("PartyId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("PrimaryContactId");

                    b.HasIndex("PromptPaymentDiscountAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("SalesDiscountAccountId");

                    b.HasIndex("TaxGroupId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Core.Domain.Sales.CustomerAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("SalesReceiptHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("SalesReceiptHeaderId");

                    b.ToTable("CustomerAllocation");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesDeliveryHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeneralLedgerHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.HasIndex("PaymentTermId");

                    b.ToTable("SalesDeliveryHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesDeliveryLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SalesDeliveryHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesInvoiceLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesDeliveryHeaderId");

                    b.HasIndex("SalesInvoiceLineId");

                    b.ToTable("SalesDeliveryLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeneralLedgerHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShippingHandlingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.ToTable("SalesInvoiceHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InventoryControlJournalId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SalesInvoiceHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesOrderLineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryControlJournalId");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesInvoiceHeaderId");

                    b.HasIndex("SalesOrderLineId");

                    b.ToTable("SalesInvoiceLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTermId");

                    b.ToTable("SalesOrderHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SalesOrderHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesOrderHeaderId");

                    b.ToTable("SalesOrderLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesQuoteHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("SalesQuoteHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesQuoteLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SalesQuoteHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SalesQuoteHeaderId");

                    b.ToTable("SalesQuoteLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesReceiptHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountToDebitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeneralLedgerHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountToDebitId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GeneralLedgerHeaderId");

                    b.ToTable("SalesReceiptHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesReceiptLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountToCreditId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SalesInvoiceLineId")
                        .HasColumnType("int");

                    b.Property<int>("SalesReceiptHeaderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountToCreditId");

                    b.HasIndex("SalesInvoiceLineId");

                    b.HasIndex("SalesReceiptHeaderId");

                    b.ToTable("SalesReceiptLine");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SecurityGroup", "dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityGroupId");

                    b.ToTable("SecurityPermission", "dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SysAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("System")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SecurityRole", "dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityRolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SecurityPermissionId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityPermissionId");

                    b.HasIndex("SecurityRoleId");

                    b.ToTable("SecurityRolePermission", "dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SecurityRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityUserRole", "dbo");
                });

            modelBuilder.Entity("Core.Domain.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("Core.Domain.SequenceNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NextNumber")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNumberType")
                        .HasColumnType("int");

                    b.Property<bool>("UsePrefix")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SequenceNumber");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.ItemTaxGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsFullyExempt")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemTaxGroup");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.ItemTaxGroupTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsExempt")
                        .HasColumnType("bit");

                    b.Property<int>("ItemTaxGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemTaxGroupId");

                    b.HasIndex("TaxId");

                    b.ToTable("ItemTaxGroupTax");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PurchasingAccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SalesAccountId")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PurchasingAccountId");

                    b.HasIndex("SalesAccountId");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.TaxGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("TaxAppliedToShipping")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TaxGroup");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.TaxGroupTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaxGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaxGroupId");

                    b.HasIndex("TaxId");

                    b.ToTable("TaxGroupTax");
                });

            modelBuilder.Entity("Core.Domain.VendorContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorContact");
                });

            modelBuilder.Entity("Core.Domain.Auditing.AuditableAttribute", b =>
                {
                    b.HasOne("Core.Domain.Auditing.AuditableEntity", "AuditableEntity")
                        .WithMany("AuditableAttributes")
                        .HasForeignKey("AuditableEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditableEntity");
                });

            modelBuilder.Entity("Core.Domain.CompanySetting", b =>
                {
                    b.HasOne("Core.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Core.Domain.Contact", b =>
                {
                    b.HasOne("Core.Domain.Party", "Party")
                        .WithMany("Contacts")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Core.Domain.CustomerContact", b =>
                {
                    b.HasOne("Core.Domain.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("CustomerContact")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.Domain.Financials.Account", b =>
                {
                    b.HasOne("Core.Domain.Financials.AccountClass", "AccountClass")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Financials.Account", "ParentAccount")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("ParentAccountId");

                    b.Navigation("AccountClass");

                    b.Navigation("Company");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("Core.Domain.Financials.Bank", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerLine", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "Account")
                        .WithMany("GeneralLedgerLines")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany("GeneralLedgerLines")
                        .HasForeignKey("GeneralLedgerHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("GeneralLedgerHeader");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerSetting", b =>
                {
                    b.HasOne("Core.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Core.Domain.Financials.Account", "GoodsReceiptNoteClearingAccount")
                        .WithMany()
                        .HasForeignKey("GoodsReceiptNoteClearingAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "IncomeSummaryAccount")
                        .WithMany()
                        .HasForeignKey("IncomeSummaryAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "PayableAccount")
                        .WithMany()
                        .HasForeignKey("PayableAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "PermanentAccount")
                        .WithMany()
                        .HasForeignKey("PermanentAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "PurchaseDiscountAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseDiscountAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesDiscountAccount")
                        .WithMany()
                        .HasForeignKey("SalesDiscountAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "ShippingChargeAccount")
                        .WithMany()
                        .HasForeignKey("ShippingChargeAccountId");

                    b.Navigation("Company");

                    b.Navigation("GoodsReceiptNoteClearingAccount");

                    b.Navigation("IncomeSummaryAccount");

                    b.Navigation("PayableAccount");

                    b.Navigation("PermanentAccount");

                    b.Navigation("PurchaseDiscountAccount");

                    b.Navigation("SalesDiscountAccount");

                    b.Navigation("ShippingChargeAccount");
                });

            modelBuilder.Entity("Core.Domain.Financials.JournalEntryHeader", b =>
                {
                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.Navigation("GeneralLedgerHeader");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Core.Domain.Financials.JournalEntryLine", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Financials.JournalEntryHeader", "JournalEntryHeader")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("JournalEntryHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("JournalEntryHeader");
                });

            modelBuilder.Entity("Core.Domain.Financials.MainContraAccount", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "MainAccount")
                        .WithOne()
                        .HasForeignKey("Core.Domain.Financials.MainContraAccount", "MainAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Domain.Financials.Account", "RelatedContraAccount")
                        .WithMany()
                        .HasForeignKey("RelatedContraAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainAccount");

                    b.Navigation("RelatedContraAccount");
                });

            modelBuilder.Entity("Core.Domain.Items.InventoryControlJournal", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("InventoryControlJournals")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("Core.Domain.Items.Item", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "CostOfGoodsSoldAccount")
                        .WithMany()
                        .HasForeignKey("CostOfGoodsSoldAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "InventoryAccount")
                        .WithMany()
                        .HasForeignKey("InventoryAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "InventoryAdjustmentAccount")
                        .WithMany()
                        .HasForeignKey("InventoryAdjustmentAccountId");

                    b.HasOne("Core.Domain.Items.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId");

                    b.HasOne("Core.Domain.TaxSystem.ItemTaxGroup", "ItemTaxGroup")
                        .WithMany()
                        .HasForeignKey("ItemTaxGroupId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "PreferredVendor")
                        .WithMany()
                        .HasForeignKey("PreferredVendorId");

                    b.HasOne("Core.Domain.Items.Measurement", "PurchaseMeasurement")
                        .WithMany()
                        .HasForeignKey("PurchaseMeasurementId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId");

                    b.HasOne("Core.Domain.Items.Measurement", "SellMeasurement")
                        .WithMany()
                        .HasForeignKey("SellMeasurementId");

                    b.HasOne("Core.Domain.Items.Measurement", "SmallestMeasurement")
                        .WithMany()
                        .HasForeignKey("SmallestMeasurementId");

                    b.Navigation("CostOfGoodsSoldAccount");

                    b.Navigation("InventoryAccount");

                    b.Navigation("InventoryAdjustmentAccount");

                    b.Navigation("ItemCategory");

                    b.Navigation("ItemTaxGroup");

                    b.Navigation("PreferredVendor");

                    b.Navigation("PurchaseMeasurement");

                    b.Navigation("SalesAccount");

                    b.Navigation("SellMeasurement");

                    b.Navigation("SmallestMeasurement");
                });

            modelBuilder.Entity("Core.Domain.Items.ItemCategory", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AdjustmentAccount")
                        .WithMany()
                        .HasForeignKey("AdjustmentAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "AssemblyAccount")
                        .WithMany()
                        .HasForeignKey("AssemblyAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "CostOfGoodsSoldAccount")
                        .WithMany()
                        .HasForeignKey("CostOfGoodsSoldAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "InventoryAccount")
                        .WithMany()
                        .HasForeignKey("InventoryAccountId");

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId");

                    b.Navigation("AdjustmentAccount");

                    b.Navigation("AssemblyAccount");

                    b.Navigation("CostOfGoodsSoldAccount");

                    b.Navigation("InventoryAccount");

                    b.Navigation("Measurement");

                    b.Navigation("SalesAccount");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseInvoiceHeader", b =>
                {
                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("VendorId");

                    b.Navigation("GeneralLedgerHeader");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseInvoiceLine", b =>
                {
                    b.HasOne("Core.Domain.Items.InventoryControlJournal", "InventoryControlJournal")
                        .WithMany()
                        .HasForeignKey("InventoryControlJournalId");

                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Purchases.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("PurchaseInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Purchases.PurchaseOrderLine", "PurchaseOrderLine")
                        .WithMany("PurchaseInvoiceLines")
                        .HasForeignKey("PurchaseOrderLineId");

                    b.Navigation("InventoryControlJournal");

                    b.Navigation("Item");

                    b.Navigation("Measurement");

                    b.Navigation("PurchaseInvoiceHeader");

                    b.Navigation("PurchaseOrderLine");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderHeader", b =>
                {
                    b.HasOne("Core.Domain.Purchases.PurchaseInvoiceHeader", null)
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PurchaseInvoiceHeaderId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderLine", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Purchases.PurchaseOrderHeader", "PurhcaseOrderHeader")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PurchaseOrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Measurement");

                    b.Navigation("PurhcaseOrderHeader");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseReceiptHeader", b =>
                {
                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany("PurchaseOrderReceipts")
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralLedgerHeader");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseReceiptLine", b =>
                {
                    b.HasOne("Core.Domain.Items.InventoryControlJournal", "InventoryControlJournal")
                        .WithMany()
                        .HasForeignKey("InventoryControlJournalId");

                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("PurchaseReceiptLines")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Purchases.PurchaseInvoiceLine", "PurchaseInvoiceLine")
                        .WithMany()
                        .HasForeignKey("PurchaseInvoiceLineId");

                    b.HasOne("Core.Domain.Purchases.PurchaseReceiptHeader", "PurchaseReceiptHeader")
                        .WithMany("PurchaseReceiptLines")
                        .HasForeignKey("PurchaseReceiptHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryControlJournal");

                    b.Navigation("Item");

                    b.Navigation("Measurement");

                    b.Navigation("PurchaseInvoiceLine");

                    b.Navigation("PurchaseReceiptHeader");
                });

            modelBuilder.Entity("Core.Domain.Purchases.Vendor", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AccountsPayableAccount")
                        .WithMany()
                        .HasForeignKey("AccountsPayableAccountId");

                    b.HasOne("Core.Domain.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("Core.Domain.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.HasOne("Core.Domain.Contact", "PrimaryContact")
                        .WithMany()
                        .HasForeignKey("PrimaryContactId");

                    b.HasOne("Core.Domain.Financials.Account", "PurchaseAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "PurchaseDiscountAccount")
                        .WithMany()
                        .HasForeignKey("PurchaseDiscountAccountId");

                    b.HasOne("Core.Domain.TaxSystem.TaxGroup", "TaxGroup")
                        .WithMany()
                        .HasForeignKey("TaxGroupId");

                    b.Navigation("AccountsPayableAccount");

                    b.Navigation("Party");

                    b.Navigation("PaymentTerm");

                    b.Navigation("PrimaryContact");

                    b.Navigation("PurchaseAccount");

                    b.Navigation("PurchaseDiscountAccount");

                    b.Navigation("TaxGroup");
                });

            modelBuilder.Entity("Core.Domain.Purchases.VendorPayment", b =>
                {
                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.Purchases.PurchaseInvoiceHeader", "PurchaseInvoiceHeader")
                        .WithMany("VendorPayments")
                        .HasForeignKey("PurchaseInvoiceHeaderId");

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("VendorPayments")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralLedgerHeader");

                    b.Navigation("PurchaseInvoiceHeader");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Core.Domain.Sales.Customer", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AccountsReceivableAccount")
                        .WithMany()
                        .HasForeignKey("AccountsReceivableAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "CustomerAdvancesAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAdvancesAccountId");

                    b.HasOne("Core.Domain.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("Core.Domain.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.HasOne("Core.Domain.Contact", "PrimaryContact")
                        .WithMany()
                        .HasForeignKey("PrimaryContactId");

                    b.HasOne("Core.Domain.Financials.Account", "PromptPaymentDiscountAccount")
                        .WithMany()
                        .HasForeignKey("PromptPaymentDiscountAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesDiscountAccount")
                        .WithMany()
                        .HasForeignKey("SalesDiscountAccountId");

                    b.HasOne("Core.Domain.TaxSystem.TaxGroup", "TaxGroup")
                        .WithMany()
                        .HasForeignKey("TaxGroupId");

                    b.Navigation("AccountsReceivableAccount");

                    b.Navigation("CustomerAdvancesAccount");

                    b.Navigation("Party");

                    b.Navigation("PaymentTerm");

                    b.Navigation("PrimaryContact");

                    b.Navigation("PromptPaymentDiscountAccount");

                    b.Navigation("SalesAccount");

                    b.Navigation("SalesDiscountAccount");

                    b.Navigation("TaxGroup");
                });

            modelBuilder.Entity("Core.Domain.Sales.CustomerAllocation", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("CustomerAllocations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Domain.Sales.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany("CustomerAllocations")
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Domain.Sales.SalesReceiptHeader", "SalesReceiptHeader")
                        .WithMany("CustomerAllocations")
                        .HasForeignKey("SalesReceiptHeaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SalesInvoiceHeader");

                    b.Navigation("SalesReceiptHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesDeliveryHeader", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.HasOne("Core.Domain.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.Navigation("Customer");

                    b.Navigation("GeneralLedgerHeader");

                    b.Navigation("PaymentTerm");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesDeliveryLine", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId");

                    b.HasOne("Core.Domain.Sales.SalesDeliveryHeader", "SalesDeliveryHeader")
                        .WithMany("SalesDeliveryLines")
                        .HasForeignKey("SalesDeliveryHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Sales.SalesInvoiceLine", "SalesInvoiceLine")
                        .WithMany()
                        .HasForeignKey("SalesInvoiceLineId");

                    b.Navigation("Item");

                    b.Navigation("Measurement");

                    b.Navigation("SalesDeliveryHeader");

                    b.Navigation("SalesInvoiceLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceHeader", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.Navigation("Customer");

                    b.Navigation("GeneralLedgerHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceLine", b =>
                {
                    b.HasOne("Core.Domain.Items.InventoryControlJournal", "InventoryControlJournal")
                        .WithMany()
                        .HasForeignKey("InventoryControlJournalId");

                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany("SalesInvoiceLines")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Sales.SalesInvoiceHeader", "SalesInvoiceHeader")
                        .WithMany("SalesInvoiceLines")
                        .HasForeignKey("SalesInvoiceHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Sales.SalesOrderLine", "SalesOrderLine")
                        .WithMany("SalesInvoiceLines")
                        .HasForeignKey("SalesOrderLineId");

                    b.Navigation("InventoryControlJournal");

                    b.Navigation("Item");

                    b.Navigation("Measurement");

                    b.Navigation("SalesInvoiceHeader");

                    b.Navigation("SalesOrderLine");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderHeader", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Domain.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");

                    b.Navigation("Customer");

                    b.Navigation("PaymentTerm");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderLine", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Sales.SalesOrderHeader", "SalesOrderHeader")
                        .WithMany("SalesOrderLines")
                        .HasForeignKey("SalesOrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Measurement");

                    b.Navigation("SalesOrderHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesQuoteHeader", b =>
                {
                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesQuoteLine", b =>
                {
                    b.HasOne("Core.Domain.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Items.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Sales.SalesQuoteHeader", "SalesQuoteHeader")
                        .WithMany("SalesQuoteLines")
                        .HasForeignKey("SalesQuoteHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Measurement");

                    b.Navigation("SalesQuoteHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesReceiptHeader", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AccountToDebit")
                        .WithMany()
                        .HasForeignKey("AccountToDebitId");

                    b.HasOne("Core.Domain.Sales.Customer", "Customer")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Financials.GeneralLedgerHeader", "GeneralLedgerHeader")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerHeaderId");

                    b.Navigation("AccountToDebit");

                    b.Navigation("Customer");

                    b.Navigation("GeneralLedgerHeader");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesReceiptLine", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "AccountToCredit")
                        .WithMany()
                        .HasForeignKey("AccountToCreditId");

                    b.HasOne("Core.Domain.Sales.SalesInvoiceLine", "SalesInvoiceLine")
                        .WithMany("SalesReceiptLines")
                        .HasForeignKey("SalesInvoiceLineId");

                    b.HasOne("Core.Domain.Sales.SalesReceiptHeader", "SalesReceiptHeader")
                        .WithMany("SalesReceiptLines")
                        .HasForeignKey("SalesReceiptHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountToCredit");

                    b.Navigation("SalesInvoiceLine");

                    b.Navigation("SalesReceiptHeader");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityPermission", b =>
                {
                    b.HasOne("Core.Domain.Security.SecurityGroup", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityRolePermission", b =>
                {
                    b.HasOne("Core.Domain.Security.SecurityPermission", "SecurityPermission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("SecurityPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Security.SecurityRole", "SecurityRole")
                        .WithMany("Permissions")
                        .HasForeignKey("SecurityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityPermission");

                    b.Navigation("SecurityRole");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityUserRole", b =>
                {
                    b.HasOne("Core.Domain.Security.SecurityRole", "SecurityRole")
                        .WithMany("Users")
                        .HasForeignKey("SecurityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Security.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.ItemTaxGroupTax", b =>
                {
                    b.HasOne("Core.Domain.TaxSystem.ItemTaxGroup", "ItemTaxGroup")
                        .WithMany("ItemTaxGroupTax")
                        .HasForeignKey("ItemTaxGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.TaxSystem.Tax", "Tax")
                        .WithMany("ItemTaxGroupTaxes")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTaxGroup");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.Tax", b =>
                {
                    b.HasOne("Core.Domain.Financials.Account", "PurchasingAccount")
                        .WithMany()
                        .HasForeignKey("PurchasingAccountId");

                    b.HasOne("Core.Domain.Financials.Account", "SalesAccount")
                        .WithMany()
                        .HasForeignKey("SalesAccountId");

                    b.Navigation("PurchasingAccount");

                    b.Navigation("SalesAccount");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.TaxGroupTax", b =>
                {
                    b.HasOne("Core.Domain.TaxSystem.TaxGroup", "TaxGroup")
                        .WithMany("TaxGroupTax")
                        .HasForeignKey("TaxGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.TaxSystem.Tax", "Tax")
                        .WithMany("TaxGroupTaxes")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tax");

                    b.Navigation("TaxGroup");
                });

            modelBuilder.Entity("Core.Domain.VendorContact", b =>
                {
                    b.HasOne("Core.Domain.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Purchases.Vendor", "Vendor")
                        .WithMany("VendorContact")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Core.Domain.Auditing.AuditableEntity", b =>
                {
                    b.Navigation("AuditableAttributes");
                });

            modelBuilder.Entity("Core.Domain.Financials.Account", b =>
                {
                    b.Navigation("ChildAccounts");

                    b.Navigation("GeneralLedgerLines");
                });

            modelBuilder.Entity("Core.Domain.Financials.AccountClass", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Core.Domain.Financials.GeneralLedgerHeader", b =>
                {
                    b.Navigation("GeneralLedgerLines");

                    b.Navigation("PurchaseOrderReceipts");
                });

            modelBuilder.Entity("Core.Domain.Financials.JournalEntryHeader", b =>
                {
                    b.Navigation("JournalEntryLines");
                });

            modelBuilder.Entity("Core.Domain.Items.Item", b =>
                {
                    b.Navigation("InventoryControlJournals");

                    b.Navigation("PurchaseInvoiceLines");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("PurchaseReceiptLines");

                    b.Navigation("SalesInvoiceLines");
                });

            modelBuilder.Entity("Core.Domain.Items.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Core.Domain.Party", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseInvoiceHeader", b =>
                {
                    b.Navigation("PurchaseInvoiceLines");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("VendorPayments");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderHeader", b =>
                {
                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseOrderLine", b =>
                {
                    b.Navigation("PurchaseInvoiceLines");
                });

            modelBuilder.Entity("Core.Domain.Purchases.PurchaseReceiptHeader", b =>
                {
                    b.Navigation("PurchaseReceiptLines");
                });

            modelBuilder.Entity("Core.Domain.Purchases.Vendor", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReceipts");

                    b.Navigation("VendorContact");

                    b.Navigation("VendorPayments");
                });

            modelBuilder.Entity("Core.Domain.Sales.Customer", b =>
                {
                    b.Navigation("CustomerAllocations");

                    b.Navigation("CustomerContact");

                    b.Navigation("SalesInvoices");

                    b.Navigation("SalesOrders");

                    b.Navigation("SalesReceipts");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesDeliveryHeader", b =>
                {
                    b.Navigation("SalesDeliveryLines");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceHeader", b =>
                {
                    b.Navigation("CustomerAllocations");

                    b.Navigation("SalesInvoiceLines");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesInvoiceLine", b =>
                {
                    b.Navigation("SalesReceiptLines");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderHeader", b =>
                {
                    b.Navigation("SalesOrderLines");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesOrderLine", b =>
                {
                    b.Navigation("SalesInvoiceLines");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesQuoteHeader", b =>
                {
                    b.Navigation("SalesQuoteLines");
                });

            modelBuilder.Entity("Core.Domain.Sales.SalesReceiptHeader", b =>
                {
                    b.Navigation("CustomerAllocations");

                    b.Navigation("SalesReceiptLines");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityPermission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Core.Domain.Security.SecurityRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Domain.Security.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.ItemTaxGroup", b =>
                {
                    b.Navigation("ItemTaxGroupTax");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.Tax", b =>
                {
                    b.Navigation("ItemTaxGroupTaxes");

                    b.Navigation("TaxGroupTaxes");
                });

            modelBuilder.Entity("Core.Domain.TaxSystem.TaxGroup", b =>
                {
                    b.Navigation("TaxGroupTax");
                });
#pragma warning restore 612, 618
        }
    }
}
