@using System.Linq.Expressions;
@using Dto.Inventory.Response;
@using WebBlazor.Rx

<RadzenDropDown LoadData=@DropdownLoadData AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                Data=@data TextProperty="@nameof(GetItemCategory.Name)" ValueProperty="@nameof(GetItemCategory.Id)" AllowClear="false"
                @bind-Value=SelectedId Change="()=> SelectedIdChanged.InvokeAsync(SelectedId)" class="w-100" />

@code {
    [Parameter]
    public int? SelectedId { get; set; }
    [Parameter]
    public EventCallback<int?> SelectedIdChanged { get; set; }

    [Inject] LookupRx lookupRx { get; set; } = default!;

    protected IEnumerable<GetItemCategory> data { get; set; } = Enumerable.Empty<GetItemCategory>();

    IEnumerable<GetItemCategory> lookup { get { return lookupRx.ItemCategoriesLookup.Value; } }

    protected override void OnInitialized()
    {
        data = lookup;
    }

    protected void DropdownLoadData(LoadDataArgs args)
    {
        data = SearchDropdown(args).ToArray();
        InvokeAsync(StateHasChanged);
    }

    IQueryable<GetItemCategory> SearchDropdown(LoadDataArgs args)
    {
        var query = lookup.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(c => c.Name.ToLower().Contains(args.Filter.ToLower()));
        }

        return query;
    }

}